name: Ray.jl - CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags: ["*"]
    paths:
      - "Ray.jl/**"
      - ".github/workflows/Ray_CI.yml"
  pull_request:
    paths:
      - "Ray.jl/**"
      - ".github/workflows/Ray_CI.yml"
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    # Run on push's or non-draft PRs
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on:
      labels: ubuntu-20.04-16core
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1.8"  # Version used with MVP
          - "1.9"  # Latest release
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - name: Clone Ray repository
        uses: actions/checkout@v3
        with:
          repository: beacon-biosignals/ray
          path: deps/ray
      - name: Determine Ray commit
        id: ray-commit
        run: |
           cd deps/ray
           head_sha="$(git rev-parse HEAD)"
           echo "head_sha=$head_sha" | tee -a "$GITHUB_OUTPUT"
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      # TODO: We shouldn't require separate caches per Julia version but allow cache restores to work
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      - name: Restore build cache
        uses: actions/cache/restore@v3
        id: build-cache
        with:
          key: build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.ray-${{ steps.ray-commit.outputs.head_sha }}.hash-${{ hashFiles('deps/WORKSPACE.bazel.tpl', 'deps/BUILD.bazel') }}
          path: ~/.cache
          restore-keys: |
            build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.ray-${{ steps.ray-commit.outputs.head_sha }}.
            build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.

      # Based upon:
      # https://docs.ray.io/en/releases-2.5.1/ray-contribute/development.html#building-ray-on-linux-macos-full
      - name: Build Ray CLI
        run: |
          pip install --upgrade pip wheel
          pushd deps/ray

          # The Ray BUILD.bazel includes a bunch of `copy_to_workspace` rules which copy build output
          # into the Ray worktree. When we only restore the Bazel cache then re-building causes these
          # rules to be skipped resulting in `error: [Errno 2] No such file or directory`. By manually
          # saving/restoring these files we can work around this.
          RAY_GEN_CACHE_DIR=~/.cache/ray-generated
          if [ -d "$RAY_GEN_CACHE_DIR" ]; then
              dest=$(pwd)
              pushd $RAY_GEN_CACHE_DIR
              cp -rp --parents \
                  python/ray/_raylet.so \
                  python/ray/core/generated \
                  python/ray/serve/generated \
                  python/ray/core/src/ray/raylet/raylet \
                  python/ray/core/src/ray/gcs \
                  $dest
              popd
          fi

          pushd python
          pip install . --verbose  # Fresh build takes ~50 minutes on basic GH runner
          popd

          # By copying the entire Ray worktree we can easily restore missing files without having to
          # delete the cache and build from scratch.
          mkdir -p "$RAY_GEN_CACHE_DIR"
          cp -rfp . "$RAY_GEN_CACHE_DIR"
      - name: "Monorepo setup"
        shell: julia --color=yes --project=Ray.jl {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(; path="."))
      - uses: julia-actions/julia-buildpkg@v1
        with:
          project: Ray.jl
      - uses: julia-actions/julia-runtest@v1
        with:
          project: Ray.jl
          annotate: true
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: Ray.jl/src/
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          flags: Ray.jl

      # https://github.com/actions/cache/tree/main/save#always-save-cache
      - name: Save build cache
        uses: actions/cache/save@v3
        if: always() && steps.build-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.build-cache.outputs.cache-primary-key }}
          path: ~/.cache

name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags: ["*"]  # Triggers from tags ignore the `paths` filter: https://github.com/orgs/community/discussions/26273
    paths:
      - "src/**"
      - "test/**"
      - "Project.toml"
      - ".github/workflows/CI.yml"
  pull_request:
    paths:
      - "src/**"
      - "test/**"
      - "Project.toml"
      - ".github/workflows/CI.yml"
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
env:
  build_dir: ./build
  ray_dir: ./build/ray
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1.8"  # Version used with MVP
          - "1.9"  # Latest release
        os:
          - ubuntu-20.04-16core
          - macos-latest-xlarge  # Apple silicon
        arch:
          - x64
          - aarch64
        exclude:
          - os: ubuntu-20.04-16core
            arch: aarch64
          - os: macos-latest-xlarge
            arch: x64
    steps:
      - uses: actions/checkout@v3
      - name: Determine Ray commit
        id: ray-commit
        run: |
          read -r sha < build/ray_commit
          echo "sha=$sha" | tee -a "$GITHUB_OUTPUT"
      - name: Clone Ray repository
        uses: actions/checkout@v3
        with:
          repository: beacon-biosignals/ray
          path: ${{ env.ray_dir }}
          ref: ${{ steps.ray-commit.outputs.sha }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: ${{ env.ray_dir }}/python/setup.py
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
        with:
          cache-name: "${{ github.workflow }}-${{ github.job }}-${{ matrix.pkg.name }}-${{ matrix.version }}-${{ matrix.os }}-${{ matrix.arch }}"
          cache-compiled: true

      # TODO: We shouldn't require separate caches per Julia version but allow cache restores to work
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      # https://github.com/beacon-biosignals/Ray.jl/issues/63
      - name: Restore build cache
        uses: actions/cache/restore@v3
        id: build-cache
        with:
          key: build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.ray-${{ steps.ray-commit.outputs.sha }}.hash-${{ hashFiles('build/WORKSPACE.bazel.tpl', 'build/BUILD.bazel') }}
          path: ~/.cache
          restore-keys: |
            build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.ray-${{ steps.ray-commit.outputs.sha }}.
            build-cache.ray-jl.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.

      # Based upon:
      # https://docs.ray.io/en/releases-2.5.1/ray-contribute/development.html#building-ray-on-linux-macos-full
      - name: Build Ray CLI
        run: |
          pip install --upgrade pip wheel

          # Use `~/.cache/bazel` as the Bazel cache directory on macOS
          # https://bazel.build/remote/output-directories
          if [ "$(uname -s)" = "Darwin" ]; then
              mkdir -p ~/.cache/bazel/_bazel_$USER
              rm -rf /private/var/tmp/_bazel_$USER  # Bazel cached data may be present from unrelated builds
              ln -s ~/.cache/bazel/_bazel_$USER /private/var/tmp/_bazel_$USER
          fi

          # The Ray BUILD.bazel includes a bunch of `copy_to_workspace` rules which copy build output
          # into the Ray worktree. When we only restore the Bazel cache then re-building causes these
          # rules to be skipped resulting in `error: [Errno 2] No such file or directory`. By manually
          # saving/restoring these files we can work around this.
          RAY_GEN_CACHE_DIR=~/.cache/ray-generated
          if [ -d "$RAY_GEN_CACHE_DIR" ]; then
              ray_repo=$(pwd)
              srcs=(
                  python/ray/_raylet.so \
                  python/ray/core/generated \
                  python/ray/serve/generated \
                  python/ray/core/src/ray/raylet/raylet \
                  python/ray/core/src/ray/gcs \
              )
              # Reimplemented `cp --parents` as this isn't supported by macOS
              for rel in "${srcs[@]}"; do
                  echo "Restoring $rel" >&2
                  src="$RAY_GEN_CACHE_DIR/$rel"
                  dest=$(dirname "$ray_repo/$rel")
                  mkdir -p $dest
                  cp -rp $src $dest
              done
          fi

          pushd python
          pip install . --verbose  # Fresh build takes ~50 minutes on basic GH runner
          popd

          # By copying the entire Ray worktree we can easily restore missing files without having to
          # delete the cache and build from scratch. Skip copy when we don't save the cache.
          if [ "${{ steps.build-cache.outputs.cache-hit }}" != "true" ]; then
              mkdir -p "$RAY_GEN_CACHE_DIR"
              cp -rfp . "$RAY_GEN_CACHE_DIR"
          fi

          # Verify Ray CLI works
          echo "Verify Ray CLI works" >&2
          ray --version
        working-directory: ${{ env.ray_dir }}
      - name: Build ray_julia library
        id: ray_julia
        shell: julia --color=yes --project {0}
        run: |
          using Pkg
          Pkg.instantiate()
          include(joinpath(pwd(), "build_tarballs.jl"))
          tarball_path = build_host_tarball()
          open(ENV["GITHUB_OUTPUT"], "a") do io
              println(io, "tarball_path=$tarball_path")
              println(io, "tarball_filename=$(basename(tarball_path))")
          end
        working-directory: ${{ env.build_dir }}
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        with:
          annotate: true
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          flags: Ray.jl

      - name: Save ray_julia library
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.ray_julia.outputs.tarball_filename }}
          path: ${{ steps.ray_julia.outputs.tarball_path }}

      - name: Save Ray logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ray-logs.${{ matrix.os }}.${{ matrix.arch }}.julia-${{ matrix.version }}.run-${{ github.run_number }}
          path: /tmp/ray/session_latest/logs

      # https://github.com/actions/cache/tree/main/save#always-save-cache
      - name: Save build cache
        uses: actions/cache/save@v3
        if: always() && steps.build-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.build-cache.outputs.cache-primary-key }}
          path: ~/.cache
  release:
    name: "Publish Pre-Release"
    runs-on: ubuntu-20.04-16core
    needs: [test]
    permissions:
      actions: read
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: julia-actions/setup-julia@v1
        with:
          version: "1.8"
          arch: "x64"
      - uses: julia-actions/cache@v1
      - name: Check Project version
        id: version_check
        shell: julia --color=yes --project {0}
        run: |
          using Pkg.Types
          project = read_project("Project.toml")
          open(ENV["GITHUB_OUTPUT"], "a") do io
            println(io, "version=v$(project.version)")
            println(io, "release_branch=release-v$(project.version)")
          end
      - name: Download Artifacts
        shell: julia --color=yes --project {0}
        run: |
          using Pkg
          Pkg.instantiate()
          include(joinpath(pwd(), "download_tarballs.jl"))
          download_tarballs()
        working-directory: ${{ env.build_dir }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Update Artifacts.toml
        shell: julia --color=yes --project {0}
        run: |
          using Pkg
          Pkg.instantiate()
          include(joinpath(pwd(), "bind_artifacts.jl"))
          bind_artifacts()
        working-directory: ${{ env.build_dir }}
      - name: Commit Changes
        id: commit
        run: |
          git checkout -b ${{ steps.version_check.outputs.release_branch }}
          git commit -m "Update Artifacts.toml" -- Artifacts.toml
          echo "commitish=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          git checkout main
      - name: Publish Pre-Release
        uses: softprops/action-gh-release@v1
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          prerelease: true
          target_commitish: ${{ steps.commit.outputs.commitish }}
          generate_release_notes: true
          files: ${{ env.build_dir }}/tarballs
      - name: Push Release Branch
        if: ${{ github.ref == 'refs/heads/main' }}
        run: git push origin ${{ steps.version_check.outputs.release_branch }}
      
          

name: Release CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "Project.toml"
jobs:
  branch:
    name: "Create Release Branch"
    runs-on: ubuntu-20.04-16core
    strategy:
      fail-fast: false
    steps:
        - uses: actions/checkout@v3
        - uses: julia-actions/setup-julia@v1
          with:
            version: "1.8"
            arch: "x64"
        - uses: julia-actions/cache@v1
        - name: Check Project version
          id: version_check
          shell: julia --color=yes --project {0}
          run: |
            using Pkg.Types
            project = read_project("Project.toml")
            latest_tag = parse(VersionNumber, readchomp(`git describe --tags --abbrev=0`))
            @assert project.version > latest_tag "$(project.version) !> $latest_tag"
            open(ENV["GITHUB_OUTPUT"], "a") do io
              println(io, "version=$(project.version)")
            end
          continue-on-error: true
        - name: Checkout new branch
          if: steps.version_check.outcome = 'success'
          run: |
            release_branch="release-v${{ steps.version_check.outputs.version }}"
            # Error if branch already exists
            if [[ ! -z $(git ls-remote --heads origin $release_branch) ]]; then
              echo "Release branch already exists on remote: $release_branch" >&2
              exit 1
            fi
            git checkout -b $release_branch
        - name: Update Artifacts.toml
          shell: julia --color=yes --project {0}
          run: |
            using Pkg
            Pkg.instantiate()
            include("download_tarballs.jl")  # pulls artifacts from the latest CI job
            include("upload_tarballs.jl")    # uploads artifacts as assets to GH prerelease
            include("bind_artifacts.jl")     # updates Artifacts.toml with asset metadata
        - name: Commit changes
          run: |
            git commit -m "Update Artifacts.toml" -- Artifacts.toml
            git tag v${{ steps.version_check.outputs.version }}
            git push --all origin
            
